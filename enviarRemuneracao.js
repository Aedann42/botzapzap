const fs = require('fs');
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');

// --- Caminhos centralizados para facilitar a manuten√ß√£o ---
const ETAPAS_PATH = path.join(__dirname, 'etapas.json');
const REPRESENTANTES_PATH = path.join(__dirname, 'representantes.json');
const SENHA_REMUNERACAO_PATH = path.join(__dirname, 'senhaRemuneracao.json');

// --- Fun√ß√£o auxiliar para ler JSON de forma segura ---
function lerJson(filePath, defaultValue = {}) {
    try {
        if (fs.existsSync(filePath)) {
            return JSON.parse(fs.readFileSync(filePath, 'utf8'));
        }
    } catch (error) {
        console.error(`Erro ao ler o arquivo JSON ${filePath}:`, error);
        // Opcional: recriar arquivo com valor padr√£o se houver erro de parsing
        fs.writeFileSync(filePath, JSON.stringify(defaultValue, null, 2));
    }
    return defaultValue;
}

// --- Fun√ß√µes para carregar e salvar as etapas ---
function carregarEtapas() {
    return lerJson(ETAPAS_PATH, {});
}

function salvarEtapas(etapas) {
    try {
        fs.writeFileSync(ETAPAS_PATH, JSON.stringify(etapas, null, 2));
    } catch (error) {
        console.error(`Erro ao salvar o arquivo de etapas ${ETAPAS_PATH}:`, error);
    }
}

// --- Fun√ß√£o principal para enviar a remunera√ß√£o ---
async function enviarRemuneracao(client, message) {
    const numero = message.from;
    const texto = message.body.trim();

    let etapas = carregarEtapas();
    const etapaAtual = etapas[numero] ? etapas[numero].etapa : undefined;

    // --- L√≥gica para cancelar a opera√ß√£o a qualquer momento ---
    if (texto.toLowerCase() === 'cancelar' || texto.toLowerCase() === 'sair') {
        if (etapas[numero]) {
            delete etapas[numero];
            salvarEtapas(etapas);
            await client.sendMessage(numero, 'üö´ Opera√ß√£o de remunera√ß√£o cancelada. Se precisar novamente, digite a op√ß√£o no menu.');
        } else {
            await client.sendMessage(numero, 'N√£o h√° nenhuma opera√ß√£o em andamento para cancelar.');
        }
        return;
    }

    console.log(`[Remunera√ß√£o] Recebido texto: "${texto}" de ${numero}. Etapa atual: ${etapaAtual}`);

    // --- Se n√£o h√° uma etapa definida ou a etapa n√£o √© 'remuneracao', inicia o fluxo ---
    // Isso pode acontecer se o bot for reiniciado ou se a fun√ß√£o for chamada fora do fluxo esperado.
    if (!etapaAtual || etapaAtual !== 'remuneracao') {
        etapas[numero] = { etapa: 'remuneracao' }; // Define a etapa
        salvarEtapas(etapas);
        await client.sendMessage(numero, 'Por favor, informe sua *matr√≠cula* para continuar, lembrando que s√≥ pode ter os n√∫meros na pr√≥xima mensagem!');
        return;
    }

    // --- Processa a matr√≠cula quando a etapa √© 'remuneracao' ---
    try {
        const matricula = texto.replace(/\D/g, ''); // Remove tudo que n√£o for n√∫mero

        // Valida se a matr√≠cula cont√©m apenas n√∫meros ap√≥s a limpeza
        if (!/^\d+$/.test(matricula)) {
            await client.sendMessage(numero, '‚ùó Por favor, digite apenas os *n√∫meros* da sua matr√≠cula.');
            // N√£o exclui a etapa, esperando uma nova tentativa v√°lida
            return;
        }

        const representantes = lerJson(REPRESENTANTES_PATH, []);
        const senhaRemuneracao = lerJson(SENHA_REMUNERACAO_PATH, []);

        const telefone = numero.replace('@c.us', '');
        const representante = representantes.find(r => r.telefone === telefone);

        if (!representante) {
            await client.sendMessage(numero, '‚ùå Seu n√∫mero n√£o est√° registrado como representante. N√£o √© poss√≠vel consultar a remunera√ß√£o.');
            delete etapas[numero];
            salvarEtapas(etapas);
            return;
        }

        const setor = representante.setor?.toString(); // Usa optional chaining para seguran√ßa

        if (!setor) {
            await client.sendMessage(numero, '‚ùå Seu setor n√£o foi encontrado no cadastro. Por favor, contate o administrador.');
            delete etapas[numero];
            salvarEtapas(etapas);
            return;
        }

        const credencialValida = senhaRemuneracao.find(
            item =>
                item.setor?.toString() === setor &&
                item.senha?.toString() === matricula
        );

        if (!credencialValida) {
            await client.sendMessage(numero, '‚ùå Matr√≠cula incorreta para o seu setor. Por favor, tente novamente digitando a op√ß√£o 4 ou digite "cancelar".');
            // N√£o exclui a etapa para permitir nova tentativa
            return;
        }

        // --- Caminho UNC para o arquivo (exemplo) ---
        // Certifique-se de que o caminho est√° correto para o seu ambiente
        const arquivoPath = path.join(
            '\\\\VSRV-DC01\\Arquivos\\VENDAS\\METAS E PROJETOS\\2025\\7 - JULHO\\_GERADOR PDF\\REMUNERACAO',
            setor,
            `${setor}.pdf`
        );

        console.log("üìÅ Tentando acessar arquivo em:", arquivoPath);

        if (!fs.existsSync(arquivoPath)) {
            await client.sendMessage(numero, `‚ùå A planilha de remunera√ß√£o para o setor ${setor} n√£o foi encontrada. Por favor, tente novamente mais tarde ou contate o administrador.`);
            delete etapas[numero];
            salvarEtapas(etapas);
            return;
        }

        // --- Envia o arquivo PDF ---
        const media = MessageMedia.fromFilePath(arquivoPath);
        await client.sendMessage(numero, media, {
            sendMediaAsDocument: true, // Envia como documento para facilitar download
            caption: `üìÑ Sua planilha de remunera√ß√£o do setor ${setor} est√° aqui!`
        });

        await client.sendMessage(numero, '‚úÖ Sua planilha foi enviada com sucesso!');
        await client.sendSeen(numero); // <- MARCA COMO LIDA
        console.log("‚úÖ Arquivo de remunera√ß√£o enviado com sucesso.");

    } catch (err) {
        console.error("‚ùå Erro inesperado ao processar remunera√ß√£o:", err);
        await client.sendMessage(numero, "‚ùå Ocorreu um erro ao enviar sua planilha de remunera√ß√£o. Por favor, tente novamente mais tarde.");
    } finally {
        // --- Sempre limpa a etapa ap√≥s tentar enviar, seja sucesso ou falha ---
        delete etapas[numero];
        salvarEtapas(etapas);
        console.log(`[Remunera√ß√£o] Etapa finalizada para ${numero}.`);
    }
}

module.exports = enviarRemuneracao;