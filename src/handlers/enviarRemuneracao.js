const fs = require('fs');
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');

// Importa as fun√ß√µes e caminhos do nosso m√≥dulo de utilit√°rios
const { lerJson, escreverJson, REPRESENTANTES_PATH, ETAPAS_PATH } = require('../utils/dataHandler.js');

// --- Caminhos Espec√≠ficos deste M√≥dulo ---
const SENHA_REMUNERACAO_PATH = path.join(__dirname, '..', '..', 'data', 'senhaRemuneracao.json');

// --- Vari√°veis para Gerenciamento da Fila de Remunera√ß√£o ---
let isSendingRemuneracao = false;
const remuneracaoSendQueue = [];

// --- Fun√ß√£o para processar a pr√≥xima requisi√ß√£o na fila ---
async function processNextRemuneracaoRequest() {
    if (remuneracaoSendQueue.length === 0) {
        isSendingRemuneracao = false;
        console.log('[Remunera√ß√£o Fila] Fila vazia. Processamento em pausa.');
        return;
    }

    isSendingRemuneracao = true;
    const { client, message, matricula } = remuneracaoSendQueue.shift();
    const numero = message.from;

    console.log(`[Remunera√ß√£o Fila] Processando solicita√ß√£o para ${numero} com matr√≠cula ${matricula}`);

    try {
        const representantes = lerJson(REPRESENTANTES_PATH, []);
        const telefone = numero.replace('@c.us', '');
        const representante = representantes.find(r => r.telefone === telefone);

        // Verifica√ß√µes que j√° foram feitas, mas √© bom garantir
        if (!representante || !representante.setor) {
             await client.sendMessage(numero, '‚ùå Ocorreu um erro ao recuperar seus dados. Tente novamente.');
             return; // N√£o continua se os dados essenciais sumiram
        }
        
        const setor = representante.setor.toString();
        
        // --- Caminho UNC para o arquivo ---
        const arquivoPath = path.join(
            String.raw`\\VSRV-DC01\Arquivos\VENDAS\METAS E PROJETOS\2025\9 - SETEMBRO\_GERADOR PDF\REMUNERACAO`,
            setor,
            `${setor}.pdf`
        );

        console.log("üìÅ Tentando acessar arquivo em:", arquivoPath);

        if (!fs.existsSync(arquivoPath)) {
            await client.sendMessage(numero, `‚ùå A planilha de remunera√ß√£o para o setor ${setor} n√£o foi encontrada. Por favor, contate o administrador.`);
            return;
        }

        // --- Envia o arquivo PDF ---
        await client.sendMessage(numero, 'üîÑ Sua planilha est√° sendo preparada para envio, aguarde...');
        const media = MessageMedia.fromFilePath(arquivoPath);
        await client.sendMessage(numero, media, {
            sendMediaAsDocument: true,
            caption: `üìÑ Sua planilha de remunera√ß√£o do setor ${setor} est√° aqui!`
        });

        await client.sendMessage(numero, '‚úÖ Sua planilha foi enviada com sucesso!');
        await client.sendSeen(numero);
        console.log(`[Remunera√ß√£o Fila] Arquivo enviado com sucesso para ${numero}.`);

    } catch (err) {
        console.error("‚ùå Erro inesperado ao processar remunera√ß√£o na fila:", err);
        await client.sendMessage(numero, "‚ùå Ocorreu um erro ao enviar sua planilha de remunera√ß√£o. Por favor, tente novamente mais tarde.");
    } finally {
        // --- Processa o pr√≥ximo da fila, independentemente de sucesso ou falha ---
        processNextRemuneracaoRequest();
    }
}


// --- Fun√ß√£o Principal Exportada (agora gerencia a conversa e a fila) ---
async function enviarRemuneracao(client, message) {
    const numero = message.from;
    const texto = message.body.trim();

    let etapas = lerJson(ETAPAS_PATH, {});
    const etapaAtual = etapas[numero] ? etapas[numero].etapa : undefined;

    // --- L√≥gica para cancelar a opera√ß√£o a qualquer momento ---
    if (texto.toLowerCase() === 'cancelar' || texto.toLowerCase() === 'sair') {
        if (etapas[numero]) {
            delete etapas[numero];
            escreverJson(ETAPAS_PATH, etapas);
            await client.sendMessage(numero, 'üö´ Opera√ß√£o de remunera√ß√£o cancelada.');
        } else {
            await client.sendMessage(numero, 'N√£o h√° nenhuma opera√ß√£o em andamento para cancelar.');
        }
        return;
    }

    // Se a etapa n√£o √© 'remuneracao', (re)inicia o fluxo
    if (!etapaAtual || etapaAtual !== 'remuneracao') {
        etapas[numero] = { etapa: 'remuneracao' };
        escreverJson(ETAPAS_PATH, etapas);
        await client.sendMessage(numero, 'Por favor, informe sua *matr√≠cula* para continuar (apenas n√∫meros).');
        return;
    }

    // --- Etapa 'remuneracao': Processa a matr√≠cula e adiciona √† fila ---
    const matricula = texto.replace(/\D/g, '');

    if (!/^\d+$/.test(matricula) || matricula.length === 0) {
        await client.sendMessage(numero, '‚ùó Por favor, digite apenas os *n√∫meros* da sua matr√≠cula.');
        return;
    }
    
    // Valida√ß√µes antes de adicionar √† fila
    const representantes = lerJson(REPRESENTANTES_PATH, []);
    const senhaRemuneracao = lerJson(SENHA_REMUNERACAO_PATH, []);
    const telefone = numero.replace('@c.us', '');
    const representante = representantes.find(r => r.telefone === telefone);

    if (!representante) {
        await client.sendMessage(numero, '‚ùå Seu n√∫mero n√£o est√° registrado.');
        delete etapas[numero];
        escreverJson(ETAPAS_PATH, etapas);
        return;
    }

    const setor = representante.setor?.toString();
    if (!setor) {
        await client.sendMessage(numero, '‚ùå Seu setor n√£o foi encontrado no cadastro.');
        delete etapas[numero];
        escreverJson(ETAPAS_PATH, etapas);
        return;
    }

    const credencialValida = senhaRemuneracao.find(
        item => item.setor?.toString() === setor && item.senha?.toString() === matricula
    );

    if (!credencialValida) {
        await client.sendMessage(numero, '‚ùå Matr√≠cula incorreta para o seu setor. Para tentar novamente, digite a op√ß√£o no menu.');
        delete etapas[numero];
        escreverJson(ETAPAS_PATH, etapas);
        return;
    }

    // --- L√≥gica de Fila ---
    // Limpa a etapa do usu√°rio, pois a valida√ß√£o foi um sucesso
    delete etapas[numero];
    escreverJson(ETAPAS_PATH, etapas);

    // Adiciona a solicita√ß√£o √† fila
    remuneracaoSendQueue.push({ client, message, matricula });
    console.log(`[Remunera√ß√£o] Usu√°rio ${numero} adicionado √† fila.`);

    if (!isSendingRemuneracao) {
        // Se ningu√©m estiver sendo processado, inicia o processo
        processNextRemuneracaoRequest();
    } else {
        // Se j√° houver um processo, apenas avisa o usu√°rio
        await client.sendMessage(numero, 'üëç Voc√™ foi adicionado √† fila. J√° estou enviando outra planilha e a sua ser√° a pr√≥xima!');
    }
}

module.exports = enviarRemuneracao;