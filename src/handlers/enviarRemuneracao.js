const fs = require('fs');
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');
const { lerJson, escreverJson, REPRESENTANTES_PATH, ETAPAS_PATH } = require('../utils/dataHandler.js');

const SENHA_REMUNERACAO_PATH = path.join(__dirname, '..', '..', 'data', 'senhaRemuneracao.json');
let isSendingRemuneracao = false;
const remuneracaoSendQueue = [];

async function processNextRemuneracaoRequest() {
    if (remuneracaoSendQueue.length === 0) {
        isSendingRemuneracao = false;
        console.log('[Remunera√ß√£o Fila] Fila vazia. Processamento em pausa.');
        return;
    }

    isSendingRemuneracao = true;
    const { client, message, matricula } = remuneracaoSendQueue.shift();
    const numero = message.from;

    console.log(`[Remunera√ß√£o Fila] Processando solicita√ß√£o para ${numero} (Matr√≠cula: ${matricula})`);

    try {
        const representantes = lerJson(REPRESENTANTES_PATH, []);
        const telefone = numero.replace('@c.us', '');
        const representante = representantes.find(r => r.telefone === telefone);

        if (!representante || !representante.setor) {
            await client.sendMessage(numero, '‚ùå Ocorreu um erro ao recuperar seus dados. Tente novamente.');
            return;
        }
        
        const setor = representante.setor.toString();
        
        const arquivoPath = path.join(
            String.raw`\\VSRV-DC01\Arquivos\VENDAS\METAS E PROJETOS\2025\9 - SETEMBRO\_GERADOR PDF\REMUNERACAO`,
            setor,
            `${setor}.pdf`
        );

        console.log("üìÅ Tentando acessar arquivo em:", arquivoPath);

        if (!fs.existsSync(arquivoPath)) {
            await client.sendMessage(numero, `‚ùå A planilha de remunera√ß√£o para o setor ${setor} n√£o foi encontrada. Por favor, contate o administrador.`);
            return;
        }

        await client.sendMessage(numero, 'üîÑ Sua planilha est√° sendo preparada para envio, aguarde...');
        const media = MessageMedia.fromFilePath(arquivoPath);
        await client.sendMessage(numero, media, {
            sendMediaAsDocument: true,
            caption: `üìÑ Sua planilha de remunera√ß√£o do setor ${setor} est√° aqui!`
        });

        await client.sendMessage(numero, '‚úÖ Sua planilha foi enviada com sucesso!');
        await client.sendSeen(numero);
        console.log(`[Remunera√ß√£o Fila] Arquivo enviado com sucesso para ${numero}.`);
    } catch (err) {
        console.error("‚ùå Erro inesperado ao processar remunera√ß√£o na fila:", err);
        await client.sendMessage(numero, "‚ùå Ocorreu um erro ao enviar sua planilha de remunera√ß√£o. Por favor, tente novamente mais tarde.");
    } finally {
        processNextRemuneracaoRequest();
    }
}

async function enviarRemuneracao(client, message) {
    const numero = message.from;
    const texto = message.body.trim();
    const isOperatorRequest = message._operator_triggered === true;

    let etapas = lerJson(ETAPAS_PATH, {});
    const etapaAtual = etapas[numero] ? etapas[numero].etapa : undefined;

    if (texto.toLowerCase() === 'cancelar' || texto.toLowerCase() === 'sair') {
        if (etapas[numero]) {
            delete etapas[numero];
            escreverJson(ETAPAS_PATH, etapas);
            await client.sendMessage(numero, 'üö´ Opera√ß√£o de remunera√ß√£o cancelada.');
        }
        return;
    }

    // --- CAMINHO 1: REQUISI√á√ÉO DIRETA DO OPERADOR ---
    if (isOperatorRequest) {
        console.log(`[OPERADOR] Requisi√ß√£o de remunera√ß√£o para ${numero}, pulando valida√ß√£o.`);
        // Valida√ß√µes b√°sicas de cadastro, mas sem pedir matr√≠cula
        const representantes = lerJson(REPRESENTANTES_PATH, []);
        const telefone = numero.replace('@c.us', '');
        const representante = representantes.find(r => r.telefone === telefone);

        if (!representante || !representante.setor) {
            await client.sendMessage(numero, '‚ùå Cadastro do representante n√£o encontrado ou sem setor definido. N√£o √© poss√≠vel continuar.');
            return;
        }

        // Adiciona √† fila diretamente
        remuneracaoSendQueue.push({ client, message, matricula: 'BYPASS_OPERADOR' });
        console.log(`[Remunera√ß√£o] Usu√°rio ${numero} adicionado √† fila pelo operador.`);

        if (!isSendingRemuneracao) {
            processNextRemuneracaoRequest();
        } else {
            await client.sendMessage(numero, 'üëç Voc√™ foi adicionado √† fila. J√° estou enviando outra planilha e a sua ser√° a pr√≥xima!');
        }
        return; // Finaliza aqui
    }

    // --- CAMINHO 2: USU√ÅRIO RESPONDENDO A MATR√çCULA ---
    if (etapaAtual === 'remuneracao') {
        const matricula = texto.replace(/\D/g, '');

        if (!/^\d+$/.test(matricula) || matricula.length === 0) {
            await client.sendMessage(numero, '‚ùó Por favor, digite apenas os *n√∫meros* da sua matr√≠cula.');
            return;
        }
        
        const representantes = lerJson(REPRESENTANTES_PATH, []);
        const senhaRemuneracao = lerJson(SENHA_REMUNERACAO_PATH, []);
        const telefone = numero.replace('@c.us', '');
        const representante = representantes.find(r => r.telefone === telefone);
        const setor = representante?.setor?.toString();

        const credencialValida = senhaRemuneracao.find(
            item => item.setor?.toString() === setor && item.senha?.toString() === matricula
        );

        if (!credencialValida) {
            await client.sendMessage(numero, '‚ùå Matr√≠cula incorreta para o seu setor. Para tentar novamente, digite a op√ß√£o no menu.');
            delete etapas[numero];
            escreverJson(ETAPAS_PATH, etapas);
            return;
        }

        delete etapas[numero];
        escreverJson(ETAPAS_PATH, etapas);

        remuneracaoSendQueue.push({ client, message, matricula });
        console.log(`[Remunera√ß√£o] Usu√°rio ${numero} adicionado √† fila.`);

        if (!isSendingRemuneracao) {
            processNextRemuneracaoRequest();
        } else {
            await client.sendMessage(numero, 'üëç Voc√™ foi adicionado √† fila. J√° estou enviando outra planilha e a sua ser√° a pr√≥xima!');
        }
        return; // Finaliza aqui
    }

    // --- CAMINHO 3: USU√ÅRIO INICIANDO O FLUXO NORMALMENTE ---
    etapas[numero] = { etapa: 'remuneracao' };
    escreverJson(ETAPAS_PATH, etapas);
    await client.sendMessage(numero, 'Por favor, informe sua *matr√≠cula* para continuar (apenas n√∫meros).');
}

module.exports = enviarRemuneracao;