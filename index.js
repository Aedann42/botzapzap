const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js'); //
const qrcode = require('qrcode-terminal'); //
const fs = require('fs'); //
const path = require('path'); //

// Importe os novos m√≥dulos (j√° existentes no seu c√≥digo original)
const enviarRelatoriosImagem = require('./enviarRelatoriosImagem'); //
const enviarRelatoriosPdf = require('./enviarRelatoriosPdf'); //
const enviarRemuneracao = require('./enviarRemuneracao'); //
const enviarResumoPDV = require('./enviarResumoPDV'); // O m√≥dulo que acabamos de ajustar


const atendidosPath = path.join(__dirname, 'atendidos.json'); //
let atendidos = fs.existsSync(atendidosPath) //
  ? JSON.parse(fs.readFileSync(atendidosPath, 'utf8')) //
  : []; //

const client = new Client({ //
  authStrategy: new LocalAuth(), //
  puppeteer: { //
    headless: true, //
    args: ['--no-sandbox', '--disable-setuid-sandbox'] //
  }
});

client.on('qr', qr => qrcode.generate(qr, { small: true })); //

client.on('ready', () => console.log('‚úÖ Bot conectado!')); //

client.on('message', async message => { //
  const numero = message.from; //

  if (numero.endsWith('@g.us')) return; // Ignora grupos

  // A parte de 'representantes.json' e 'autorizado' √© importante para a seguran√ßa.
  // Vou manter o c√≥digo como voc√™ o forneceu no in√≠cio para garantir a compatibilidade.
  const representantes = JSON.parse(fs.readFileSync('./representantes.json', 'utf8')); //
  const autorizado = representantes.some(rep => rep.telefone === numero.replace('@c.us', '')); //

  if (!autorizado) { //
    console.log(`N√∫mero n√£o autorizado: ${numero}`); //
    return; //
  }

  // L√≥gica para enviar a mensagem de boas-vindas e op√ß√µes apenas uma vez por usu√°rio
  if (!atendidos.includes(numero)) { //
    const hora = new Date().getHours(); //
    const saudacaoBase = hora <= 12 ? 'Bom dia' : 'Boa tarde'; //

    const saudacoesAlternativas = [ //
      'Tudo certo por a√≠?', //
      'Como vai voc√™?', //
      'Tudo bem por a√≠?', //
      'Espero que esteja tudo em ordem.', //
      'Como posso ajudar?', //
      'Fico feliz em receber sua mensagem.', //
      '√â um prazer falar com voc√™.', //
      'Estou √† disposi√ß√£o para ajudar.', //
      'O que mandas?', //
      'Que bom receber seu contato.' //
    ];
    const aleatoria = saudacoesAlternativas[Math.floor(Math.random() * saudacoesAlternativas.length)]; //

    await client.sendMessage( //
      message.from, //
      `${saudacaoBase}! ${aleatoria}\n\nüåü Escolha uma op√ß√£o abaixo para que eu possa te ajudar: üåü\n\n1Ô∏è‚É£ - Quero meus relat√≥rios em PDF üìÑ‚ú®\n2Ô∏è‚É£ - Quero meus relat√≥rios em imagens üñºÔ∏èüé®\n3Ô∏è‚É£ - Preciso de ajuda do APR para demais assuntos üí¨ü§î\n4Ô∏è‚É£ - Quero minha planilha de remunera√ß√£o üíºüí∞\n5Ô∏è‚É£ - Consultar tarefas do PDV üìãüîç` //
    );

    atendidos.push(numero); //
    fs.writeFileSync(atendidosPath, JSON.stringify(atendidos, null, 2)); //
    return; //
  }

  const opcao = message.body.trim(); //

  // Etapas em andamento (para gerenciar fluxos de conversa√ß√£o)
  const etapasPath = path.join(__dirname, 'etapas.json'); //
  const etapas = fs.existsSync(etapasPath) //
    ? JSON.parse(fs.readFileSync(etapasPath, 'utf8')) //
    : {}; //

  if (etapas[numero]) { //
    if (etapas[numero].etapa === 'pdv') { //
      // Se estiver na etapa PDV, chama o envio do resumo PDV
      // A chamada aguarda a Promise retornada por enviarResumoPDV
      await enviarResumoPDV(client, message); //
      delete etapas[numero]; // limpa etapa ap√≥s uso
      fs.writeFileSync(etapasPath, JSON.stringify(etapas, null, 2)); //
      return; //
    } else {
      // Outras etapas (como remunera√ß√£o)
      await enviarRemuneracao(client, message); //
      // A l√≥gica para deletar a etapa de remunera√ß√£o deve estar dentro de enviarRemuneracao
      // ou aqui se ela sempre finalizar o fluxo
      return; //
    }
  }

  // Gerenciamento das op√ß√µes do menu principal
  if (opcao === '1') { //
    await enviarRelatoriosPdf(client, message); //
  } else if (opcao === '2') { //
    await enviarRelatoriosImagem(client, message); //
  } else if (opcao === '3') { //
    await client.sendMessage( //
      message.from, //
      'Certo, por favor descreva a sua demanda sem se esquecer do NB e caso necess√°rio encaminhe prints para maior agilidade no atendimento.' //
    );
  } else if (opcao === '4') { //
    await enviarRemuneracao(client, message); //
  } else if (opcao === '5') { //
    await client.sendMessage(message.from, 'Por favor, envie o c√≥digo do PDV que deseja consultar as tarefas!'); //
    etapas[numero] = { etapa: 'pdv' }; //
    fs.writeFileSync(etapasPath, JSON.stringify(etapas, null, 2)); //
    return; //
  } else {
    // Caso o usu√°rio digite algo que n√£o √© uma op√ß√£o v√°lida ap√≥s a primeira sauda√ß√£o
    // Voc√™ pode adicionar uma mensagem de "op√ß√£o inv√°lida" aqui se desejar
  }
});

client.initialize(); //

// Eventos de estado do cliente (manter para monitoramento)
client.on('disconnected', reason => { //
  console.error('‚ö†Ô∏è Cliente desconectado:', reason); //
  process.exit(1); //
});

client.on('auth_failure', msg => { //
  console.error('‚ùå Falha na autentica√ß√£o:', msg); //
  process.exit(1); //
});

client.on('change_state', state => { //
  console.log('üîÑ Estado do cliente mudou para:', state); //
});

client.on('loading_screen', (percent, message) => { //
  console.log(`‚è≥ Carregando... ${percent}% - ${message}`); //
});