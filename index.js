// üìÑ index.js

const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');
const enviarRelatoriosImagem = require('./enviarRelatoriosImagem');
const enviarRelatoriosPdf = require('./enviarRelatoriosPdf');
const enviarRemuneracao = require('./enviarRemuneracao');

const atendidosPath = path.join(__dirname, 'atendidos.json');
let atendidos = fs.existsSync(atendidosPath)
  ? JSON.parse(fs.readFileSync(atendidosPath, 'utf8'))
  : [];

const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  }
});

client.on('qr', qr => qrcode.generate(qr, { small: true }));

client.on('ready', () => console.log('‚úÖ Bot conectado!'));

client.on('message', async message => {
  const numero = message.from;

  if (numero.endsWith('@g.us')) return; // Ignora grupos

  const representantes = JSON.parse(fs.readFileSync('./representantes.json', 'utf8'));
  const autorizado = representantes.some(rep => rep.telefone === numero.replace('@c.us', ''));

  if (!autorizado) {
    console.log(`N√∫mero n√£o autorizado: ${numero}`);
    return;
  }

  if (!atendidos.includes(numero)) {
    const hora = new Date().getHours();
    const saudacaoBase = hora <= 12 ? 'Bom dia' : 'Boa tarde';

    const saudacoesAlternativas = [
      'Tudo certo por a√≠?',
      'Como vai voc√™?',
      'Tudo bem por a√≠?',
      'Espero que esteja tudo em ordem.',
      'Como posso ajudar?',
      'Fico feliz em receber sua mensagem.',
      '√â um prazer falar com voc√™.',
      'Estou √† disposi√ß√£o para ajudar.',
      'O que mandas?',
      'Que bom receber seu contato.'
    ];
    const aleatoria = saudacoesAlternativas[Math.floor(Math.random() * saudacoesAlternativas.length)];

    await client.sendMessage(
      message.from,
      `${saudacaoBase}! ${aleatoria}

Escolha uma op√ß√£o:

1 - Sou RN e estou no Palm querendo relat√≥rios em PDF
2 - Sou RN e estou no Palm querendo relat√≥rios em imagens
3 - Preciso de ajuda do APR
4 - Desejo a planilha de remunera√ß√£o, a senha ser√° sua matr√≠cula. Caso n√£o lembre tem no crach√° e na ultima planilha de remunera√ß√£o que recebeu!`
    );

    atendidos.push(numero);
    fs.writeFileSync(atendidosPath, JSON.stringify(atendidos, null, 2));
    return;
  }

  const opcao = message.body.trim();

  // Etapas em andamento
  const etapasPath = path.join(__dirname, 'etapas.json');
  const etapas = fs.existsSync(etapasPath)
    ? JSON.parse(fs.readFileSync(etapasPath, 'utf8'))
    : {};
  
  if (etapas[numero]) {
    // Se o n√∫mero j√° est√° numa etapa ativa, encaminha direto pro fluxo
    await enviarRemuneracao(client, message);
    return;
  }
  
  if (opcao === '1') {
    await enviarRelatoriosPdf(client, message);
  } else if (opcao === '2') {
    await enviarRelatoriosImagem(client, message);
  } else if (opcao === '3') {
    await client.sendMessage(
      message.from,
      'Certo, por favor descreva a sua demanda sem se esquecer do NB e caso necess√°rio encaminhe prints para maior agilidade no atendimento.'
    );
  } else if (opcao === '4') {
    await enviarRemuneracao(client, message);
  }
  
});

client.initialize();

client.on('disconnected', reason => {
  console.error('‚ö†Ô∏è Cliente desconectado:', reason);
  process.exit(1);
});

client.on('auth_failure', msg => {
  console.error('‚ùå Falha na autentica√ß√£o:', msg);
  process.exit(1);
});

client.on('change_state', state => {
  console.log('üîÑ Estado do cliente mudou para:', state);
});

client.on('loading_screen', (percent, message) => {
  console.log(`‚è≥ Carregando... ${percent}% - ${message}`);
});
