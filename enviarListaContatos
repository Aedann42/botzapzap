// üìû enviarListaContatos.js
const fs = require('fs');
const path = require('path');
const { Contact } = require('whatsapp-web.js'); // Para enviar contato como cart√£o

// Caminhos dos arquivos
const etapasPath = path.join(__dirname, 'etapas.json');
const contatosPath = path.join(__dirname, 'contatos.json');

// Fun√ß√µes auxiliares
function carregarEtapas() {
  if (fs.existsSync(etapasPath)) {
    return JSON.parse(fs.readFileSync(etapasPath, 'utf8'));
  }
  return {};
}

function salvarEtapas(etapas) {
  fs.writeFileSync(etapasPath, JSON.stringify(etapas, null, 2));
}

function carregarContatos() {
  if (fs.existsSync(contatosPath)) {
    return JSON.parse(fs.readFileSync(contatosPath, 'utf8'));
  }
  return [];
}

// Fun√ß√£o principal
async function enviarListaContatos(client, message) {
  const numero = message.from;
  const textoOriginal = message.body.trim();
  let etapas = carregarEtapas();
  const contatos = carregarContatos();

  if (!etapas[numero]) {
    // Primeiro contato: mostra a lista e define etapa
    etapas[numero] = { etapa: 'aguardandoEscolha' };
    salvarEtapas(etapas);

    let resposta = 'üìã Qual desses contatos voc√™ precisa?\n\n';
    contatos.forEach((contato, index) => {
      resposta += `${index + 1}. ${contato.setor} - ${contato.nome}\n`;
    });

    await client.sendMessage(numero, resposta.trim());
    return;
  }

  if (etapas[numero].etapa === 'aguardandoEscolha') {
    // Usu√°rio enviou a escolha

    // Limpa tudo que n√£o for d√≠gito
    const textoLimpo = textoOriginal.replace(/\D/g, '');
    const indice = parseInt(textoLimpo);

    console.log(`Texto original recebido: "${textoOriginal}"`);
    console.log(`Texto limpo: "${textoLimpo}"`);
    console.log(`√çndice convertido: ${indice}`);

    if (isNaN(indice) || indice < 1 || indice > contatos.length) {
      await client.sendMessage(numero, '‚ùå Op√ß√£o inv√°lida. Por favor, digite o n√∫mero correspondente ao contato desejado.');
      return;
    }

    const contatoEscolhido = contatos[indice - 1];

    if (!contatoEscolhido || !contatoEscolhido.telefone) {
      await client.sendMessage(numero, '‚ùå Erro ao identificar o contato. Verifique se o n√∫mero est√° correto no arquivo de contatos.');
      return;
    }

    const msg = `üìû *Contato Selecionado:*\n\nüìç Setor: ${contatoEscolhido.setor}\nüë§ Nome: ${contatoEscolhido.nome}\nüì± Telefone: ${contatoEscolhido.telefone}`;
    await client.sendMessage(numero, msg);

    // Tenta enviar o contato como cart√£o clic√°vel (vCard)
    try {
      const numeroWhatsApp = contatoEscolhido.telefone.replace(/\D/g, '') + '@c.us';
      const contato = await client.getContactById(numeroWhatsApp);

      if (contato) {
        await client.sendMessage(numero, contato);
      } else {
        await client.sendMessage(numero, '‚ö†Ô∏è N√£o foi poss√≠vel enviar o contato como cart√£o. Enviado apenas como texto.');
      }
    } catch (error) {
      console.error('Erro ao enviar contato como cart√£o:', error);
      await client.sendMessage(numero, '‚ö†Ô∏è Erro ao enviar contato como cart√£o. Enviado apenas como texto.');
    }

    // Limpa etapa ap√≥s envio
    delete etapas[numero];
    salvarEtapas(etapas);
  }
}

module.exports = enviarListaContatos;
